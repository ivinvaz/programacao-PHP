-------Estruta geral de lógica-------
Todo código deve estar entre chaves <?php

$variavel = ... //não é necessário definir o tipo ao iniciar
define("PI", 3.14159) //define uma constante
$lista = [0,1,2]
$dic = [0=>"zero",1=>"um",2=>"dois"]
$objeto->propriedade; //A seta chama uma propriedade do objeto
$objeto->metodo(); //A seta chama um método do objeto

if (arg){
}elseif(arg){
}else{}

while(arg){}

foreach(lista as nomeParaOItem){}

function (arg){}

-------Ações em lista-------
array_push(): Adiciona um ou mais elementos ao final do array.
array_pop(): Remove e retorna o último elemento do array.
array_key_exists(): Verifica se uma determinada chave existe no array.
isset(): Verifica se uma variável (incluindo um elemento de array) está definida e não é NULL.
unset(): Destrói uma variável (ou um elemento de array).
count(): Retorna o número de elementos em um array.
array_keys(): Retorna um array com todas as chaves de um array.
array_values(): Retorna um array com todos os valores de um array.

-------Forms-------
Se refere a toda ação(campos de texto, botões, caixas de seleção, etc.) dentro de uma tag <form/>

action: Especifica a URL do script que processará os dados do formulário quando ele for submetido. Este script geralmente é uma página PHP.
method: Define o método HTTP usado para enviar os dados do formulário.

GET: adequado para dados não sensíveis, são anexados à URL especificada no atributo action como parâmetros na string de consulta (query string).
POST: enviados no corpo da requisição HTTP, de forma invisível na URL(seguro para dados sensíveis).    

$_SERVER: Um array associativo que contém informações sobre o ambiente do servidor web e da requisição atual.
$_GET: Um array associativo que contém os dados enviados através do método GET.
$_POST: Um array associativo que contém os dados enviados através do método POST. 
$_REQUEST: Um array associativo que contém os dados enviados tanto por GET quanto por POST. No entanto, o uso de $_GET ou $_POST é mais recomendado para maior clareza e segurança.

GET: Faz uma consulta.
POST: Adiciona um dados.
PUT: Edita um dado.
DELETE: Deleta um dado.

-------Estrutura de Acesso/Gerenciamento de BD-------
$conn = new mysqli($servername, $username, $password, $database); //Cria uma conexão ao banco de dados
$conn->close(); //Termina a conexão

$sql = "INSERT INTO tabela (parametro1,parametro2,parametro3) VALUES ('parametro1', 'parametro2', 'parametro3')"; //Adiciona mais um registro
$sql = "UPDATE tabela SET aparametro='$novo_aparametro' WHERE parametro=$parametro_para_atualizar"; //Atualiza um registro
$sql = "DELETE FROM tabela WHERE parametro=$parametro_para_deletar"; //Deleta um registro

$sql = "SELECT coluna(s) FROM tabela"; 
$result = $conn->query($sql);//Consulta um registro

-------Estrutura de Sessão-------
Sessões realizam um agrupamento de envios HTTP para que haja uma relação entre eles(login).
session_start(): Inicia ou retoma uma sessão existente. Se uma sessão ainda não foi iniciada, ela criará uma nova.
session_destroy(): Destrói todos os dados registrados em uma sessão. Ela não remove a ID da sessão do cookie do navegador, apenas os dados do lado do servidor. 
Para realmente "deslogar" o usuário, você também pode precisar limpar o cookie de sessão.

-------Estrutura de Cookie-------
setcookie(): Usada para definir um cookie. Ela deve ser chamada antes de qualquer saída para o navegador.

Sintaxe básica: setcookie(name, value, expire, path, domain, secure, httponly);
name (obrigatório): O nome do cookie.
value (opcional): O valor do cookie.
expire (opcional): O tempo de expiração do cookie. Um timestamp Unix. Se omitido ou 0, o cookie será uma "sessão de cookie" e expira quando o navegador é fechado.
path (opcional): O caminho no servidor onde o cookie estará disponível. Se for '/', o cookie estará disponível em todo o domínio.
domain (opcional): O domínio para o qual o cookie está disponível.
secure (opcional): Se true, o cookie só será enviado em conexões HTTPS seguras.
httponly (opcional): Se true, o cookie só será acessível via HTTP(S) e não via JavaScript. (Aumenta a segurança contra ataques XSS).
$_COOKIE: Superglobal que contém todos os cookies enviados pelo navegador para o servidor na requisição atual. É uma array associativa onde as chaves são os nomes dos cookies.

-------Estrutura de Acesso-------
É necessário manter os arquivos dentro da pasta do servidor correspondente, no caso www.

Para rodar o código no servidor, é necessário abrir o html com a url:
http://localhost/caminho dentro da pasta do server