-------Estrutura de Criação/Inicialização-------
Laravel é um framework para desenvolvimento de aplicativos web

composer create-project laravel/laravel nomeDoApp //cria o arquivo com laravel
php artisan serve //liga o servidor de desenvolvimento
http://127.0.0.1:8000 //endereço genérico de acesso

-------Estrutura de arquitetura MVC-------
Model (Modelo): Representa os dados e a lógica de negócios relacionada a esses dados. No Laravel, os Modelos são 
geralmente classes PHP que estendem Illuminate\Database\Eloquent\Model.Eles interagem com o banco de dados.

View (Visão): Responsável por exibir os dados ao usuário. No Laravel, as Views são arquivos .blade.php que usam
o Blade Templating Engine. Elas contêm HTML e pequenas partes de lógica para exibir os dados passados pelo 
Controller.

Controller (Controlador): Atua como um intermediário entre o Modelo e a Visão. Ele recebe as requisições do 
usuário, interage com o Modelo para obter/salvar dados e então passa esses dados para a Visão para serem 
exibidos.

-------Estrutura de controladores/rotas-------
Controladores serverm para gerenciar as rotas de um app

php artisan make:controller nomeControlador //comando para criação de um controlador

*dentro do arquivo routes/web*
Route::get('/nomeDaView', [nomeDoControlador::class, 'nomeDaFuncao']); //cria uma nova rota que pode ser acessada por http://127.0.0.1:8000/nomeDaView

*dentro da funcao com return no controlador*
return view('nomeDaView', ['nomeDaVariaveNaView' => $variavelEscolhida]);

-------Estrutura de Blade Templating Engine-------
Motor de templates padrão do Laravel.

Para exibir o conteúdo de uma variável, use chaves duplas: {{ $variavel }}.
@if, @else, @endif. 
@foreach, @endforeach.
@for, @endfor .
@extends
@section 
@yield: Para layouts (veremos em breve).
@include: Para incluir outras views parciais.

-------Comandos báscios de sql-------
Conectar ao MySQL server: mysql -u [username] -p
mostrar as database disponíveis: SHOW DATABASES

php artisan make:migration create_products_table //cria uma nova migração
php artisan migrate // executa uma migração
php artisan migrate:status // mostra o estado das migrações
php artisan migrate:rollback // reverte a ultima leva de migrações
php artisan migrate:fresh // remove todas as tabelas do bd e executa as migrações novamente

-------Eloquent ORM-------
Administrador de BD do laravel

//Dentro do controller
Product::all(): Retorna todos os registros.
Product::find(1): Encontra um registro pelo ID da chave primária.
Product::where('stock', '>', 10)->get(): Retorna registros onde o estoque é maior que 10.
Product::first(): Retorna o primeiro registro que corresponde à consulta.
Product::findorFail(1): Encontra pelo ID ou lança uma exceção se não encontrar.
Product::orderBy('name', 'asc')->get(): Ordena por nome ascendente.
Product::limit(5)->get(): Retorna apenas 5 registros.


php artisan make:model nomeTabela //cria um modificador para a tabela escolhida 
//dentro do modificador da tabela
>use Illuminate\Database\Eloquent\Factories\HasFactory;
dentro da class principal> use HasFactory;
dentro da class principal>
protected $fillable = [
        'name',
        'description',
        'price',
        'stock'
    ];


//dentro do console interativo do artisan
>php artisan tinker

//método create() (requer a propriedade $fillable no modelo)
>
$item = App\Models\Product::create([
    'name' => 'Nome',
    'description' => 'Descrição.',
    'price' => 1.0,
    'stock' => 1
]);